/ {
	aliases {

        // LED aliases
        heartbeat = &led0;  // this corresponds to LED1 on the board
        battery = &led1;  // this corresponds to LED2 on the board
        measure = &led2;  // this corresponds to LED3 on the board
        error = &led3;  // this corresponds to LED4 on the board

        // Button aliases
        measurebutton = &button0;  // Measure button corresponds to SW1 on the board
        clearbutton = &button1; // Clear button corresponds to SW2 on the board
        resetbutton = &button2;  // Reset button corresponds to SW3 on the board

        // ADC channel aliases

        vadcbatt = &vadcbatt;     // ADC channel 0; measures battery level (P0.02)
        vadchr = &vadchr;  // ADC channel 2 does a differential measurement on ECG signal (P0.04 and P0.05)


        // PWM channel aliases
        pwmled0 = &pwmhb;
        pwmled1 = &pwmbatt;
        pwmled2 = &pwmhr;
        pwmled3 = &pwmerr;
    };

zephyr,user {
        io-channels = <&adc 0>, <&adc 2>;
};

pwm {
    compatible = "pwm-leds";

    pwmhb: pwm_1 {
        pwms = < &pwm0 0 PWM_MSEC(1) PWM_POLARITY_INVERTED >;  // PWM channel 0 is used for heartbeat LED
        // official nordic academy example uses INVERTED for 'normal' polarity
        // https://github.com/NordicDeveloperAcademy/ncs-inter
        label = "PWM_HEARTBEAT_LED";
    };

    pwmbatt: pwm_2 {
        pwms = < &pwm0 1 PWM_MSEC(1) PWM_POLARITY_INVERTED >; // 1 - channel 2
        label = "PWM_BATT_LED";
    };
    pwmhr: pwm_3 {
        pwms = < &pwm0 2 PWM_MSEC(1) PWM_POLARITY_INVERTED >; // 2 - channel 3
        label = "PWM_MEASUREDHR_LED";
    };
    pwmerr: pwm_4 {
        pwms = < &pwm0 3 PWM_MSEC(1) PWM_POLARITY_INVERTED >; // 3 - channel 4
        label = "PWM_ERR_LED";
    };
    };
};

&adc {
    #address-cells = <1>;
    #size-cells = <0>;


    vadcbatt: channel@0 {
        reg = <0>; // Channel number 0
        zephyr,reference = "ADC_REF_INTERNAL"; // Internal reference (0.6)
        zephyr,gain = "ADC_GAIN_1_5"; // Gain 1/5
        zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>; // Default acquisition time
        zephyr,input-positive = <NRF_SAADC_AIN0>; // Input pin P0.02
        zephyr,resolution = <10>; // 10-bit resolution
        //zephyr,oversampling = <4>;
        //zephyr,vref-mv = <600>;
    };

    vadchr: channel@2 {
        reg = <2>; // Channel number 2
        zephyr,reference = "ADC_REF_INTERNAL"; // Internal reference (0.6)
        zephyr,gain = "ADC_GAIN_1_5"; // Gain 1/5
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40)>;  // Acquisition time in microseconds
        zephyr,input-positive = <NRF_SAADC_AIN2>;  // Positive input on AIN2; PO.04
        zephyr,input-negative = <NRF_SAADC_AIN4>;  // Negative input on AIN4; PO.28
        zephyr,resolution = <12>;  // 12-bit resolution
        // zephyr,vref-mv = <750>;
    };

    status = "okay"; // Enable the ADC
};
  

&pwm0 {
    compatible = "nordic,nrf-pwm"; // PWM compatible
    reg = <0x4001c000 0x1000>; // PWM base address
    interrupts = <28 NRF_DEFAULT_IRQ_PRIORITY>; // PWM interrupt
    status = "okay"; // Enable the PWM
    #pwm-cells = <3>; // Number of cells in the PWM specifier
    pinctrl-0 = <&pwm0_default>; // Default pin configuration
    pinctrl-1 = <&pwm0_sleep>; // Sleep pin configuration
    pinctrl-names = "default", "sleep"; // Pin configuration names
};

&pinctrl {
    compatible = "nordic,nrf-pinctrl";
    status = "okay";
    pwm0_default: pwm0_default {
        group1 {
            psels = <NRF_PSEL(PWM_OUT0, 0, 13)>, // P0.13, LED 1
                    <NRF_PSEL(PWM_OUT1, 0, 14)>, // P0.14, LED 2
                    <NRF_PSEL(PWM_OUT2, 0, 15)>, // P0.15, LED 3
                    <NRF_PSEL(PWM_OUT3, 0, 16)>; // P0.16, LED 4
            // nordic,invert;
        };
    };
    pwm0_sleep: pwm0_sleep {
        group1 {
            psels = <NRF_PSEL(PWM_OUT0, 0, 13)>, // P0.13, LED 1
                    <NRF_PSEL(PWM_OUT1, 0, 14)>, // P0.14, LED 2
                    <NRF_PSEL(PWM_OUT2, 0, 15)>, // P0.15, LED 3
                    <NRF_PSEL(PWM_OUT3, 0, 16)>; // P0.16, LED 4
            low-power-enable;
        };
    };
};  


/* I2C Pin Mapping
SCK: P0.27
SDA: P0.26
*/

&i2c0 {
    mcp9808@18{
        compatible = "microchip,mcp9808"; // Device compatible
        reg = <0x18>; // Device address
        status = "okay"; // Enable the device
    };

};