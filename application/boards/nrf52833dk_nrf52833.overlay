/ {
	aliases {

        // LED aliases
        heartbeat = &led0;  // this corresponds to LED1 on the board
        battery = &led1;  // this corresponds to LED2 on the board
        measure = &led2;  // this corresponds to LED3 on the board
        error = &led3;  // this corresponds to LED4 on the board

        // Button aliases
        measurebutton = &button0;  // Measure button corresponds to SW1 on the board
        clearbutton = &button1; // Clear button corresponds to SW2 on the board
        resetbutton = &button2;  // Reset button corresponds to SW3 on the board

        // ADC channel aliases
        temp = &temp_sensor;
        vadc0 = &vadc0;     // ADC channel 0; measures battery level (P0.02)
        vadc1 = &vadc1;  // ADC channel 2 does a differential measurement on ECG signal (P0.04 and P0.05)


        // PWM channel aliases
        pwm1 = &pwmch1;
    };

zephyr,user {
        io-channels = <&adc 0>, <&adc 1>;
};

pwm {
    compatible = "pwm-leds";
    pwmch1: pwm_1 {
        pwms = < &pwm0 0 PWM_MSEC(1) PWM_POLARITY_NORMAL>;  // 0 - channel
        label = "PWM_CH1";
    };

    };
};

&adc {
    #address-cells = <1>;
    #size-cells = <0>;

    vadc0: channel@0 {
            reg = <0>;  // channel number
            zephyr,reference = "ADC_REF_INTERNAL";  // voltage ref for SA (0.6 V)
            zephyr,gain = "ADC_GAIN_1_5"; // gain factor to scale ref voltage (1/gain)
            zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
            zephyr,input-positive = <NRF_SAADC_AIN0>; // P0.02
            zephyr,resolution = <8>;  // bit depth
    };

    vadc1: channel@1 {
        reg = <1>;  // channel number
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,gain = "ADC_GAIN_1_5"; // gain factor to scale ref voltage (1/gain)
        zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>; //Use the example
        zephyr,input-positive = <NRF_SAADC_AIN2>; // P0.04
        zephyr,input-negative = <NRF_SAADC_AIN4>; // P0.28
        zephyr,resolution = <8>;  // bit depth
    };
};


&pwm0 {
    compatible = "nordic,nrf-pwm"; // PWM compatible
    reg = <0x4001c000 0x1000>; // PWM base address
    interrupts = <28 NRF_DEFAULT_IRQ_PRIORITY>; // PWM interrupt
    status = "okay"; // Enable the PWM
    #pwm-cells = <3>; // Number of cells in the PWM specifier
    pinctrl-0 = <&pwm0_default>; // Default pin configuration
    pinctrl-1 = <&pwm0_sleep>; // Sleep pin configuration
    pinctrl-names = "default", "sleep"; // Pin configuration names
};

&pinctrl {
    compatible = "nordic,nrf-pinctrl";
    status = "okay";
    pwm0_default: pwm0_default {
        group1 {
            psels = <NRF_PSEL(PWM_OUT0, 0, 14)>; // P0.14, channel 0
            nordic,invert;
        };
    };
    pwm0_sleep: pwm0_sleep {
        group1 {
            psels = <NRF_PSEL(PWM_OUT0, 0, 14)>; // P0.14, channel 0
            low-power-enable;
        };
    };
}; 

/* I2C Pin Mapping
SCK: P0.27
SDA: P0.26
*/

&i2c0 {
    temp_sensor: mcp9808@18{
        compatible = "microchip,mcp9808"; // Device compatible
        reg = <0x18>; // Device address
        status = "okay"; // Enable the device
    };

};